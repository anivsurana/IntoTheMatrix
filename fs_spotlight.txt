#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D first_texture;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

struct Spotlight {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float constant;
  float linear;
  float quadratic;
  float cutOff;
  vec3 direction;
};

uniform Light light;
uniform Light light2;
uniform Spotlight spotlight;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
  // ambient
  vec3 ambient = (light.ambient + light2.ambient) * material.ambient * vec3(texture(first_texture, aTexCoord));

  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 lightDir2 = normalize(light2.position - aPos);
  float diff2 = max(dot(norm, lightDir2), 0.0);

  vec3 diffuse = (light.diffuse * diff + light2.diffuse * diff2) * material.diffuse * vec3(texture(first_texture, aTexCoord)); 
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);  
  vec3 reflectDir2 = reflect(-lightDir2, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), material.shininess);
  vec3 specular = (light.specular * spec + light2.specular * spec2) * material.specular;

  // spotlight
  vec3 spotlightDir = normalize(spotlight.position - aPos);
  float diffSpotlight = max(dot(norm, spotlightDir), 0.0);

  vec3 reflectDirSpotlight = reflect(-spotlightDir, norm);
  float specSpotlight = pow(max(dot(viewDir, reflectDirSpotlight), 0.0), material.shininess);

  // check if spotlight should be added
  float theta = dot(spotlightDir, normalize(-spotlight.direction));
  
  if (theta > spotlight.cutOff) {
    ambient += spotlight.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;
    diffuse += spotlight.diffuse * diffSpotlight * material.diffuse * texture(first_texture, aTexCoord).rgb;
    specular += spotlight.specular * specSpotlight * material.specular;
  }

  // combine the results
  vec3 result = ambient + diffuse + specular;
  fragColor = vec4(result, 1.0);
}