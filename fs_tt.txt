#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light;
uniform Light light2;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
  // ambient
  vec3 ambient = (light.ambient + light2.ambient) * material.ambient * texture(first_texture, aTexCoord).rgb;
  
  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 lightDir2 = normalize(light2.position - aPos);  
  float diff2 = max(dot(norm, lightDir2), 0.0);

  vec3 diffuse = (light.diffuse * diff + light2.diffuse * diff2) * material.diffuse * texture(first_texture, aTexCoord).rgb;
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  vec3 reflectDir2 = reflect(-lightDir2, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), material.shininess);

  vec3 specular = (light.specular * spec + light2.specular * spec2) * material.specular;

  vec3 result = ambient + diffuse + specular;
  fragColor = vec4(result, 1.0);
}